/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ArbibotRPSInterface extends utils.Interface {
  contractName: "ArbibotRPS";
  functions: {
    "DEAD_MOVE()": FunctionFragment;
    "arbibots()": FunctionFragment;
    "endRound(bytes,uint256,uint256,uint8,uint256)": FunctionFragment;
    "nonces(uint256)": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "startRound(bytes,uint256,uint256)": FunctionFragment;
    "submitMove2(uint256,uint256,uint8)": FunctionFragment;
    "totalRounds()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DEAD_MOVE", values?: undefined): string;
  encodeFunctionData(functionFragment: "arbibots", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endRound",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRound",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMove2",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRounds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DEAD_MOVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbibots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitMove2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRounds",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ArbibotRPS extends BaseContract {
  contractName: "ArbibotRPS";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbibotRPSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<[number]>;

    arbibots(overrides?: CallOverrides): Promise<[string]>;

    endRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move1: BigNumberish,
      move1Attestation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number, number, boolean] & {
        arbibotId1: BigNumber;
        arbibotId2: BigNumber;
        winner: BigNumber;
        move1Attestation: BigNumber;
        move1: number;
        move2: number;
        ended: boolean;
      }
    >;

    startRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      moveAttestation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitMove2(
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRounds(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEAD_MOVE(overrides?: CallOverrides): Promise<number>;

  arbibots(overrides?: CallOverrides): Promise<string>;

  endRound(
    proof: BytesLike,
    arbibotId: BigNumberish,
    roundId: BigNumberish,
    move1: BigNumberish,
    move1Attestation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number, number, boolean] & {
      arbibotId1: BigNumber;
      arbibotId2: BigNumber;
      winner: BigNumber;
      move1Attestation: BigNumber;
      move1: number;
      move2: number;
      ended: boolean;
    }
  >;

  startRound(
    proof: BytesLike,
    arbibotId: BigNumberish,
    moveAttestation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitMove2(
    arbibotId: BigNumberish,
    roundId: BigNumberish,
    move: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRounds(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<number>;

    arbibots(overrides?: CallOverrides): Promise<string>;

    endRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move1: BigNumberish,
      move1Attestation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number, number, boolean] & {
        arbibotId1: BigNumber;
        arbibotId2: BigNumber;
        winner: BigNumber;
        move1Attestation: BigNumber;
        move1: number;
        move2: number;
        ended: boolean;
      }
    >;

    startRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      moveAttestation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitMove2(
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalRounds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<BigNumber>;

    arbibots(overrides?: CallOverrides): Promise<BigNumber>;

    endRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move1: BigNumberish,
      move1Attestation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    startRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      moveAttestation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitMove2(
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRounds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbibots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move1: BigNumberish,
      move1Attestation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startRound(
      proof: BytesLike,
      arbibotId: BigNumberish,
      moveAttestation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitMove2(
      arbibotId: BigNumberish,
      roundId: BigNumberish,
      move: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
